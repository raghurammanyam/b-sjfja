"""
Django settings for Dummy project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import logging
import os
import raven
import django.utils
from django.core.mail import send_mail


from django.utils.log import DEFAULT_LOGGING
import logging.config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'u418!$%ugd8ue7(j5%z8zce!s4&y9v-na_)$@+)jh)(tqm-wpf'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'empty',
    'rest_framework',
    'raven.contrib.django.raven_compat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Dummy.urls'
{
    "tab_size": 4,
    "translate_tabs_to_spaces": True
}
RAVEN_CONFIG = {
    'dsn': 'https://afb7c30a69a34fdcac3742b03c294d83:291834fd4e9a4fa681efa25a1b73579d@sentry.io/1278387'}
#from raven.contrib.django.raven_compat.models import client

#client.captureException()
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Dummy.wsgi.application'
ADMINS = [ 'manyamraghuram62@gmail.com']
MANAGERS =ADMINS
DEFAULT_FROM_EMAIL = 'manyamraghuram@gmail.com'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

SITE_ID = 1
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'manyamraghuram@gmail.com'
EMAIL_HOST_PASSWORD = 'bargav@teja'
EMAIL_PORT = 587

#LOGLEVEL = os.environ.get('LOGLEVEL', 'info').upper()
LOGGING = ( {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'django.server': DEFAULT_LOGGING['formatters']['django.server'],
    },
    'filters': {
    #    'special': {
        #    '()': 'project.logging.SpecialFilter',
        #    'foo': 'bar',
    #    },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
      'context_filter': {
            '()': 'django_context_logging.AddContextFilter',
            'default': {'rid': None},
            },

    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'

        },
         'sentry': {
           'level': 'WARNING',
           'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',},
           'file': {
             'level': 'DEBUG',
             'class': 'logging.FileHandler',
             'filename': 'logs/debug.log',
            # 'filters': ['require_debug_true'],
             'formatter': 'verbose',},
            'userfile': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': 'logs/user.log',
                #'filters': ['require_debug_true'],
                'formatter': 'verbose',},
            'dbfile':
            {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': 'logs/db.log',
                #'filters': ['require_debug_true'],
                'formatter': 'verbose',},
        'mail_admins': {
            'level': 'DEBUG',
            'class': 'django.utils.log.AdminEmailHandler',
            #'filters': ['require_debug_true']
        },
        'django.server': DEFAULT_LOGGING['handlers']['django.server'],
    },
    'loggers': {
        'django': {
            'handlers': ['file','console','sentry','mail_admins','userfile'],
            'level': 'INFO',
             'formatter': 'verbose',

            #'level': 'ERROR',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins','userfile'],
            'level': 'ERROR',
            'propagate': True,
        },
         'empty.views': {
            'level': 'DEBUG',
            'handlers': ['file','console','sentry','mail_admins'],
            'formatter': 'verbose',
            'loggers':['django.db.backends','django'],
            # Avoid double logging because of root logger
            'propagate': False,
            },
        'empty.db': {
            'level': 'DEBUG',
            'handlers': ['dbfile','console','sentry','mail_admins'],
            'formatter': 'verbose',
            'loggers':['django.db.backends','django'],
            # Avoid double logging because of root logger
            'propagate': False,
            },
             'empty.restapi': {
                'level': 'DEBUG',
                'handlers': ['userfile','console','sentry','mail_admins'],
                'formatter': 'verbose',
                 'loggers':['django.db.backends','django','django.request'],
                # Avoid double logging because of root logger
                'propagate': True,
                },
        'django.db.backends':{
              'handlers':['console','file','dbfile','userfile'],
              'level':'DEBUG',
              'propagate':False
        },

        #'noisy_module': {
            #'level': 'DEBUG',
            #'handlers': ['file','console','sentry'],
            #'propagate': True,
        #    },
            #'Dummy.custom': {
            #'handlers': ['console','file' ,'mail_admins'],
            #'level': 'INFO',
            #'filters': ['require_debug_true']
        #}
       },
     'django.server': DEFAULT_LOGGING['loggers']['django.server'],
})
"""SERVER_EMAIL = 'manyamraghuram@gmail.com'

EMAIL_HOST = 'manyamraghuram@gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = SERVER_EMAIL
EMAIL_HOST_PASSWORD = 'bargav@teja'
MANAGERS = ADMINS
ADMINS = (
   ('Me', 'manyamraghuram62@gmail.com'),
)"""
ADMINS =['raghu','manyamraghuram62@gmail.com']
MANAGERS = ADMINS
from django.utils.log import AdminEmailHandler
from django.core.mail.message import EmailMultiAlternatives
from django.conf import settings

class MyEmailHandler(AdminEmailHandler):

    def emit(self, record):
        if not getattr(settings, "ADMINS", None):
            return
        subject = self.format_subject(record.getMessage())
        message = getattr(record, "email_body", record.getMessage())
        mail = EmailMultiAlternatives(u'%s%s' % (subject),
                    message, settings.EMAIL_HOST_USER, [a[1] for a in settings.ADMINS])
        mail.send(fail_silently=False)
#send_mail('you got an error', LOGLEVEL, DEFAULT_FROM_EMAIL ,ADMINS)

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dummy',
        'USER': 'ram',
        'PASSWORD': 'Raghuram@9',
        'HOST': 'localhost',
        'PORT': '3306'
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
