"""
Django settings for EasyPay project.

Generated by 'django-admin startproject' using Django 2.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import logging
from django.utils.log import DEFAULT_LOGGING

LOGGING_CONFIG = None

import logging.config


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'cht4d*z#ru$ld^j5d0ls$vn%4h-1_5_uos5b&^g2q!yb_u*9hj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'billpay',
    'rest_framework',
    'raven.contrib.django.raven_compat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'EasyPay.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'EasyPay.wsgi.application'
LOGLEVEL = os.environ.get('LOGLEVEL', 'DEBUG').upper()
logging.config.dictConfig( {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'django.server': DEFAULT_LOGGING['formatters']['django.server'],
    },
    'filters': {
    #    'special': {
        #    '()': 'project.logging.SpecialFilter',
        #    'foo': 'bar',
    #    },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
     # 'context_filter': {
        #    '()': 'django_context_logging.AddContextFilter',
        #    'default': {'rid': None},
        #    },

    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'

        },
         'sentry': {
           'level': 'WARNING',
           'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',},
           'file': {
             'level': 'INFO',
             'class': 'logging.FileHandler',
             'filename': 'logs/payments.log',
             'filters': ['require_debug_true'],
             'formatter': 'verbose',},
            'userfile': {
                'level': 'INFO',
                'class': 'logging.FileHandler',
                'filename': 'logs/user.log',
                'filters': ['require_debug_true'],
                'formatter': 'verbose',},
            'transactionfile':
            {
                'level': 'INFO',
                'class': 'logging.FileHandler',
                'filename': 'logs/transaction.log',
                'filters': ['require_debug_true'],
                'formatter': 'verbose',},
            'creditfile':
                 {
                 'level': 'INFO',
                 'class': 'logging.FileHandler',
                 'filename': 'logs/credit.log',
                 'filters': ['require_debug_true'],
                 'formatter': 'verbose',},
             'paymentsfile': {
               'level': 'INFO',
               'class': 'logging.FileHandler',
               'filename': 'logs/updatetransaction.log',
              'filters': ['require_debug_true'],
               'formatter': 'verbose',},
        'mail_admins': {
            'level': 'DEBUG',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_true']
        },
        'django.server': DEFAULT_LOGGING['handlers']['django.server'],
    },
    'loggers': {
        'django': {
            'handlers': ['file','console','sentry','mail_admins','userfile','paymentsfile','transactionfile'],
            'level': 'DEBUG',
             'formatter': 'verbose',

            #'level': 'ERROR',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['mail_admins','userfile'],
            'level': 'DEBUG',
            'propagate': False,
        },
         'billpay.pay': {
            'level': 'DEBUG',
            'handlers': ['paymentsfile','console','sentry','mail_admins'],
            'formatter': 'verbose',
            #'loggers':['django.db.backends','django'],
            # Avoid double logging because of root logger
            'propagate': False,
            },
        'billpay.transaction': {
            'level': 'DEBUG',
            'handlers': ['transactionfile','console','sentry','mail_admins'],
            'formatter': 'verbose',
            #'loggers':['django.db.backends','django'],
            # Avoid double logging because of root logger
            'propagate': False,
            },
             'billpay.createuser': {
                'level': 'DEBUG',
                'handlers': ['userfile','console','sentry','mail_admins'],
                'formatter': 'verbose',
                 #'loggers':['django.db.backends','django','django.request'],
                # Avoid double logging because of root logger
                'propagate': False,
                },
            'billpay.credit': {
               'level': 'DEBUG',
               'handlers': ['creditfile','console','sentry','mail_admins'],
               'formatter': 'verbose',
                #'loggers':['django.db.backends','django','django.request'],
               # Avoid double logging because of root logger
               'propagate': False,
               },

             'billpay.payments': {
                'level': 'DEBUG',
                'handlers': ['file','console','sentry','mail_admins'],
                'formatter': 'verbose',
                 #'loggers':['django.db.backends','django','django.request'],
                # Avoid double logging because of root logger
                'propagate': True,
                },

            'django.server': DEFAULT_LOGGING['loggers']['django.server'],
            },
})


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'payments',
        'USER':'ram',
        'PASSWORD':'Raghuram@9',
        'HOST':'localhost',
        'PORT':'3306'
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
